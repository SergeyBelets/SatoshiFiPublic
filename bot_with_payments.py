#!/usr/bin/env python3
import os
import sqlite3
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
import logging
import qrcode
import io
from urllib.parse import urlencode
import json

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
DEVELOPER_ID = int(os.getenv('DEVELOPER_ID', 0))

def init_db():
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        telegram_id INTEGER PRIMARY KEY,
        username TEXT,
        full_name TEXT,
        role TEXT DEFAULT 'pending',
        registered_at TIMESTAMP
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS schedule (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        day_of_week INTEGER,
        lesson_number INTEGER,
        start_time TEXT,
        subject TEXT,
        requirements TEXT,
        created_at TIMESTAMP
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS teacher_messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        from_parent_id INTEGER,
        parent_name TEXT,
        message_text TEXT,
        received_at TIMESTAMP
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS parent_messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        to_parent_id INTEGER,
        from_teacher_id INTEGER,
        teacher_name TEXT,
        message_text TEXT,
        sent_at TIMESTAMP
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS sent_announcements (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        from_teacher_id INTEGER,
        teacher_name TEXT,
        announcement_text TEXT,
        sent_at TIMESTAMP,
        recipients_count INTEGER
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS sent_homework (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        from_teacher_id INTEGER,
        teacher_name TEXT,
        homework_text TEXT,
        sent_at TIMESTAMP,
        recipients_count INTEGER
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS message_recipients (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        message_type TEXT,
        message_id INTEGER,
        recipient_id INTEGER,
        sent_successfully BOOLEAN,
        sent_at TIMESTAMP
    )''')
    # –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
    c.execute('''CREATE TABLE IF NOT EXISTS money_collections (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        description TEXT,
        amount INTEGER NOT NULL,
        teacher_phone TEXT,
        purpose_code TEXT,
        deadline DATE,
        is_active BOOLEAN DEFAULT true,
        created_by INTEGER,
        created_at TIMESTAMP
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS parent_payments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        collection_id INTEGER REFERENCES money_collections(id),
        parent_id INTEGER,
        parent_name TEXT,
        amount INTEGER,
        payment_method TEXT,
        status TEXT DEFAULT 'pending',
        payment_comment TEXT,
        paid_at TIMESTAMP,
        confirmed_by INTEGER,
        confirmed_at TIMESTAMP,
        notes TEXT
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS teacher_payment_settings (
        teacher_id INTEGER PRIMARY KEY,
        phone_number TEXT,
        receive_notifications BOOLEAN DEFAULT true,
        updated_at TIMESTAMP
    )''')
    conn.commit()
    conn.close()

def get_user_role(user_id):
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    c.execute("SELECT role FROM users WHERE telegram_id = ?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else None

def get_user_name(user_id):
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    c.execute("SELECT full_name, username FROM users WHERE telegram_id = ?", (user_id,))
    result = c.fetchone()
    conn.close()
    if result:
        return result[0] or result[1] or f"ID{user_id}"
    return f"ID{user_id}"

def get_main_menu(role):
    if role == 'developer':
        keyboard = [['üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'], ['üë®‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞']]
    elif role == 'teacher':
        keyboard = [
            ['üì¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', 'üìö –°–æ–∑–¥–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ'],
            ['üì¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π', 'üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π'],
            ['üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏', 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'],
            ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Å–∞', 'üí∞ –°–±–æ—Ä—ã –¥–µ–Ω–µ–≥']
        ]
    elif role == 'parent':
        keyboard = [
            ['üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è', 'üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è'], 
            ['üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —É—á–∏—Ç–µ–ª—é'],
            ['‚Ü©Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å —É—á–∏—Ç–µ–ª—é', 'üí∞ –ú–æ–∏ —Å–±–æ—Ä—ã']
        ]
    else:
        return None
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_payment_menu(role):
    if role == 'teacher':
        keyboard = [
            ['üí∞ –°–æ–∑–¥–∞—Ç—å —Å–±–æ—Ä', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±–æ—Ä–æ–≤'],
            ['‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ'],
            ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'üìã –í—Å–µ —Å–±–æ—Ä—ã'],
            ['üîô –ù–∞–∑–∞–¥']
        ]
    elif role == 'parent':
        keyboard = [
            ['üí≥ –ö –æ–ø–ª–∞—Ç–µ', '‚úÖ –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ'],
            ['üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π'],
            ['üîô –ù–∞–∑–∞–¥']
        ]
    else:
        return None
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def clear_user_context(context):
    context.user_data.pop('waiting_for', None)
    context.user_data.pop('selecting_parent', None)
    context.user_data.pop('parent_list', None)
    context.user_data.pop('target_parent_id', None)
    context.user_data.pop('messages_for_forwarding', None)
    context.user_data.pop('replying_to_teacher_id', None)
    context.user_data.pop('creating_collection', None)
    context.user_data.pop('setting_up_payment', None)
    context.user_data.pop('collection_title', None)
    context.user_data.pop('collection_description', None)
    context.user_data.pop('collection_amount', None)
    context.user_data.pop('temp_phone', None)

def generate_payment_comment_code(collection_id, parent_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–µ—Ä–µ–≤–æ–¥—É"""
    return f"SB{collection_id:03d}{parent_id % 1000:03d}"

def generate_sbp_qr(phone, amount, purpose, comment_code):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –¥–ª—è –°–ë–ü"""
    # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    clean_phone = ''.join(filter(str.isdigit, phone))
    if clean_phone.startswith('8'):
        clean_phone = '7' + clean_phone[1:]
    elif not clean_phone.startswith('7'):
        clean_phone = '7' + clean_phone
    
    sbp_url = f"https://qr.nspk.ru/AD10006M/{clean_phone}?amount={amount}&purpose={purpose}&comment={comment_code}"
    
    qr = qrcode.QRCode(version=1, box_size=10, border=5)
    qr.add_data(sbp_url)
    qr.make(fit=True)
    
    img = qr.make_image(fill_color="black", back_color="white")
    bio = io.BytesIO()
    img.save(bio, format='PNG')
    bio.seek(0)
    return bio

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    clear_user_context(context)
    
    await update.message.reply_text(f"üÜî –í–∞—à Telegram ID: {user_id}")
    
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    c.execute('SELECT role FROM users WHERE telegram_id = ?', (user_id,))
    existing = c.fetchone()
    
    if existing:
        role = existing[0]
    else:
        role = 'developer' if user_id == DEVELOPER_ID else 'pending'
        c.execute("INSERT INTO users VALUES (?, ?, ?, ?, ?)",
                  (user_id, user.username, user.full_name, role, datetime.now()))
        conn.commit()
        
        if role == 'pending' and DEVELOPER_ID != user_id:
            try:
                await context.bot.send_message(
                    DEVELOPER_ID,
                    f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\nID: {user_id}\n–ò–º—è: {user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\nUsername: @{user.username or '–Ω–µ—Ç'}\n\n/make_teacher {user_id} - –Ω–∞–∑–Ω–∞—á–∏—Ç—å —É—á–∏—Ç–µ–ª–µ–º\n/make_parent {user_id} - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è"
                )
            except:
                pass
    
    conn.close()
    
    if role == 'developer':
        await update.message.reply_text("–°–±—Ä–æ—Å –º–µ–Ω—é...", reply_markup=ReplyKeyboardRemove())
        markup = get_main_menu('developer')
        text = "üéõ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞\n–í—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º—ã"
        await update.message.reply_text(text, reply_markup=markup)
    elif role == 'teacher':
        text = "üë®‚Äçüè´ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —É—á–∏—Ç–µ–ª—å!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–º"
        markup = get_main_menu('teacher')
        await update.message.reply_text(text, reply_markup=markup)
    elif role == 'parent':
        text = "üë®‚Äçüë©‚Äçüëß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Ä–æ–¥–∏—Ç–µ–ª—å!\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"
        markup = get_main_menu('parent')
        await update.message.reply_text(text, reply_markup=markup)
    else:
        text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        await update.message.reply_text(text)

async def setup_teacher_payment_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if get_user_role(user_id) != 'teacher':
        return
    
    context.user_data['setting_up_payment'] = 'phone'
    await update.message.reply_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –°–ë–ü\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7xxxxxxxxxx –∏–ª–∏ 8xxxxxxxxxx):"
    )

async def create_money_collection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if get_user_role(user_id) != 'teacher':
        await update.message.reply_text("–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–±–æ—Ä—ã")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    c.execute("SELECT phone_number FROM teacher_payment_settings WHERE teacher_id = ?", (user_id,))
    payment_info = c.fetchone()
    conn.close()
    
    if not payment_info or not payment_info[0]:
        keyboard = [['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'], ['üîô –ù–∞–∑–∞–¥']]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –°–ë–ü",
            reply_markup=markup
        )
        return
    
    context.user_data['creating_collection'] = 'title'
    await update.message.reply_text("üí∞ –°–æ–∑–¥–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –¥–µ–Ω–µ–≥\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–≠–∫—Å–∫—É—Ä—Å–∏—è –≤ –ø–ª–∞–Ω–µ—Ç–∞—Ä–∏–π'):")

async def send_payment_request_to_parents(context, collection_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –≤—Å–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è–º"""
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–±–æ—Ä–∞
    c.execute("""SELECT title, description, amount, teacher_phone, purpose_code, deadline 
                 FROM money_collections WHERE id = ?""", (collection_id,))
    collection = c.fetchone()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π
    c.execute("SELECT telegram_id, full_name FROM users WHERE role = 'parent'")
    parents = c.fetchall()
    
    if not collection or not parents:
        conn.close()
        return 0
    
    title, desc, amount, teacher_phone, purpose_code, deadline = collection
    sent_count = 0
    
    for parent_id, parent_name in parents:
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
            comment_code = generate_payment_comment_code(collection_id, parent_id)
            
            c.execute("""INSERT INTO parent_payments 
                        (collection_id, parent_id, parent_name, amount, payment_comment, status)
                        VALUES (?, ?, ?, ?, ?, 'pending')""",
                     (collection_id, parent_id, parent_name or "–†–æ–¥–∏—Ç–µ–ª—å", amount, comment_code))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            deadline_str = datetime.fromisoformat(deadline).strftime('%d.%m.%Y') if deadline else "–Ω–µ —É–∫–∞–∑–∞–Ω"
            
            message = f"üí∞ –°–±–æ—Ä –¥–µ–Ω–µ–≥: {title}\n\n"
            if desc:
                message += f"üìù {desc}\n\n"
            message += f"üíµ –°—É–º–º–∞: {amount} —Ä—É–±–ª–µ–π\n"
            message += f"üìÖ –°—Ä–æ–∫: {deadline_str}\n\n"
            
            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –°–ë–ü
            message += "üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü:\n\n"
            message += f"üì± –ù–æ–º–µ—Ä: {teacher_phone}\n"
            message += f"–°—É–º–º–∞: {amount} —Ä—É–±\n"
            message += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_code}\n\n"
            message += f"‚ö†Ô∏è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_code}\n"
            message += "–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—á–µ—Ç–∞ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞\n\n"
            message += "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª'"
            
            # –ö–Ω–æ–ø–∫–∏
            keyboard = [
                [InlineKeyboardButton("üì± QR-–∫–æ–¥ –°–ë–ü", callback_data=f"qr_{collection_id}_{parent_id}")],
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{collection_id}_{parent_id}")],
                [InlineKeyboardButton("‚ùå –ù–µ –º–æ–≥—É –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"cannot_pay_{collection_id}_{parent_id}")]
            ]
            
            markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_message(parent_id, message, reply_markup=markup)
            sent_count += 1
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—é {parent_id}: {e}")
    
    conn.commit()
    conn.close()
    return sent_count

async def show_pending_payments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    if get_user_role(user_id) != 'teacher':
        return
    
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    
    c.execute("""SELECT pp.id, pp.parent_name, pp.amount, pp.payment_comment, 
                        mc.title, pp.paid_at
                 FROM parent_payments pp
                 JOIN money_collections mc ON pp.collection_id = mc.id
                 WHERE pp.status = 'paid' AND mc.created_by = ?
                 ORDER BY pp.paid_at DESC""", (user_id,))
    
    pending = c.fetchall()
    conn.close()
    
    if not pending:
        await update.message.reply_text("–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        return
    
    message = "‚è≥ –ü–ª–∞—Ç–µ–∂–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n\n"
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ
    if len(pending) > 1:
        keyboard.append([InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ", callback_data="confirm_all")])
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—Å–µ", callback_data="reject_all")])
    
    for payment in pending:
        payment_id, parent_name, amount, comment, title, paid_at = payment
        paid_time = datetime.fromisoformat(paid_at).strftime('%d.%m %H:%M')
        
        message += f"üí∞ {parent_name}\n"
        message += f"üìù {title}\n"
        message += f"üíµ {amount} —Ä—É–±.\n"
        message += f"üè∑ {comment}\n"
        message += f"‚è∞ {paid_time}\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        keyboard.append([
            InlineKeyboardButton(f"‚úÖ {parent_name}", callback_data=f"confirm_single_{payment_id}"),
            InlineKeyboardButton(f"‚ùå {parent_name}", callback_data=f"reject_single_{payment_id}")
        ])
        
        message += "\n"
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_payments")])
    markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(message, reply_markup=markup)

async def show_rejected_payments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏"""
    user_id = update.effective_user.id
    if get_user_role(user_id) != 'teacher':
        return
    
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    
    c.execute("""SELECT pp.parent_name, pp.amount, mc.title, pp.notes, pp.confirmed_at
                 FROM parent_payments pp
                 JOIN money_collections mc ON pp.collection_id = mc.id
                 WHERE pp.status = 'rejected' AND mc.created_by = ?
                 ORDER BY pp.confirmed_at DESC LIMIT 10""", (user_id,))
    
    rejected = c.fetchall()
    conn.close()
    
    if not rejected:
        await update.message.reply_text("–ù–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
        return
    
    message = "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:\n\n"
    
    for payment in rejected:
        parent_name, amount, title, notes, rejected_at = payment
        rejected_time = datetime.fromisoformat(rejected_at).strftime('%d.%m %H:%M')
        
        message += f"üë§ {parent_name}\n"
        message += f"üìù {title}\n"
        message += f"üíµ {amount} —Ä—É–±.\n"
        message += f"‚è∞ –û—Ç–∫–ª–æ–Ω–µ–Ω: {rejected_time}\n"
        if notes:
            message += f"üìÑ –ü—Ä–∏—á–∏–Ω–∞: {notes}\n"
        message += "\n"
    
    await update.message.reply_text(message)

async def handle_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    
    if data == "confirm_all":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏
        c.execute("""UPDATE parent_payments 
                    SET status = 'confirmed', confirmed_by = ?, confirmed_at = ?
                    WHERE status = 'paid' AND collection_id IN 
                    (SELECT id FROM money_collections WHERE created_by = ?)""",
                 (user_id, datetime.now().isoformat(), user_id))
        
        affected = c.rowcount
        await query.edit_message_text(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ ({affected} —à—Ç.)")
    
    elif data == "reject_all":
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏
        c.execute("""UPDATE parent_payments 
                    SET status = 'rejected', confirmed_by = ?, confirmed_at = ?, notes = '–ú–∞—Å—Å–æ–≤–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ'
                    WHERE status = 'paid' AND collection_id IN 
                    (SELECT id FROM money_collections WHERE created_by = ?)""",
                 (user_id, datetime.now().isoformat(), user_id))
        
        affected = c.rowcount
        await query.edit_message_text(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ ({affected} —à—Ç.)")
    
    elif data.startswith("confirm_single_"):
        payment_id = int(data.replace("confirm_single_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        c.execute("""SELECT pp.parent_name, pp.parent_id, mc.title 
                    FROM parent_payments pp
                    JOIN money_collections mc ON pp.collection_id = mc.id
                    WHERE pp.id = ?""", (payment_id,))
        payment_info = c.fetchone()
        
        if payment_info:
            parent_name, parent_id, title = payment_info
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            c.execute("""UPDATE parent_payments 
                        SET status = 'confirmed', confirmed_by = ?, confirmed_at = ?
                        WHERE id = ?""",
                     (user_id, datetime.now().isoformat(), payment_id))
            
            await query.edit_message_text(f"‚úÖ –ü–ª–∞—Ç–µ–∂ –æ—Ç {parent_name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è
            try:
                await context.bot.send_message(
                    parent_id,
                    f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\nüìù {title}\nüí∞ –°—É–º–º–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—á–∏—Ç–µ–ª–µ–º"
                )
            except:
                pass
    
    elif data.startswith("reject_single_"):
        payment_id = int(data.replace("reject_single_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        c.execute("""SELECT pp.parent_name, pp.parent_id, mc.title 
                    FROM parent_payments pp
                    JOIN money_collections mc ON pp.collection_id = mc.id
                    WHERE pp.id = ?""", (payment_id,))
        payment_info = c.fetchone()
        
        if payment_info:
            parent_name, parent_id, title = payment_info
            
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
            c.execute("""UPDATE parent_payments 
                        SET status = 'rejected', confirmed_by = ?, confirmed_at = ?, notes = '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ —É—á–∏—Ç–µ–ª–µ–º'
                        WHERE id = ?""",
                     (user_id, datetime.now().isoformat(), payment_id))
            
            await query.edit_message_text(f"‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç {parent_name} –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è
            try:
                await context.bot.send_message(
                    parent_id,
                    f"‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω\n\nüìù {title}\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —É—á–∏—Ç–µ–ª—é –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è"
                )
            except:
                pass
    
    elif data.startswith("paid_"):
        # –†–æ–¥–∏—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª
        data_parts = data.split('_')
        collection_id = int(data_parts[1])
        parent_id = int(data_parts[2])
        
        c.execute("""UPDATE parent_payments 
                    SET status = 'paid', paid_at = ? 
                    WHERE collection_id = ? AND parent_id = ?""",
                 (datetime.now().isoformat(), collection_id, parent_id))
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∏—Ç–µ–ª—è
        c.execute("""SELECT mc.title, pp.parent_name, pp.amount, pp.payment_comment
                    FROM money_collections mc 
                    JOIN parent_payments pp ON mc.id = pp.collection_id
                    WHERE mc.id = ? AND pp.parent_id = ?""",
                 (collection_id, parent_id))
        payment_info = c.fetchone()
        
        if payment_info:
            title, parent_name, amount, comment = payment_info
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è
            await query.edit_message_text(
                f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π\n\n"
                f"üí∞ {title}\n"
                f"üíµ {amount} —Ä—É–±.\n"
                f"üè∑ –ö–æ–¥: {comment}\n\n"
                f"–£—á–∏—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–Ω–µ–≥ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∏—Ç–µ–ª—è
            await notify_teacher_about_payment(context, collection_id, parent_name, amount, comment, "paid")
    
    elif data.startswith("cannot_pay_"):
        # –†–æ–¥–∏—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å
        data_parts = data.split('_')
        collection_id = int(data_parts[2])
        parent_id = int(data_parts[3])
        
        c.execute("""UPDATE parent_payments 
                    SET status = 'cannot_pay', notes = '–†–æ–¥–∏—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å'
                    WHERE collection_id = ? AND parent_id = ?""",
                 (collection_id, parent_id))
        
        await query.edit_message_text(
            "–ú—ã –æ—Ç–º–µ—Ç–∏–ª–∏, —á—Ç–æ —É –≤–∞—Å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –æ–ø–ª–∞—Ç–æ–π. "
            "–£—á–∏—Ç–µ–ª—å —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞."
        )
        
        c.execute("SELECT parent_name FROM parent_payments WHERE collection_id = ? AND parent_id = ?",
                 (collection_id, parent_id))
        result = c.fetchone()
        parent_name = result[0] if result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å"
        
        await notify_teacher_about_payment(context, collection_id, parent_name, 0, "", "cannot_pay")
    
    elif data.startswith("qr_"):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –¥–ª—è –°–ë–ü
        data_parts = data.split('_')
        collection_id = int(data_parts[1])
        parent_id = int(data_parts[2])
        
        c.execute("""SELECT mc.title, mc.amount, mc.teacher_phone, pp.payment_comment
                    FROM money_collections mc 
                    JOIN parent_payments pp ON mc.id = pp.collection_id
                    WHERE mc.id = ? AND pp.parent_id = ?""",
                 (collection_id, parent_id))
        qr_info = c.fetchone()
        
        if qr_info:
            title, amount, phone, comment = qr_info
            try:
                qr_bio = generate_sbp_qr(phone, amount, title, comment)
                
                await context.bot.send_photo(
                    chat_id=query.from_user.id,
                    photo=qr_bio,
                    caption=f"üì± QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü\n\n{title}\n{amount} —Ä—É–±.\n–ö–æ–¥: {comment}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {e}")
                await context.bot.send_message(
                    chat_id=query.from_user.id,
                    text="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–µ—Ä–µ–≤–æ–¥–æ–º –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
                )
    
    elif data == "back_to_payments":
        markup = get_payment_menu('teacher')
        await query.message.reply_text("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–±–æ—Ä–∞–º–∏:", reply_markup=markup)
    
    conn.commit()
    conn.close()

async def notify_teacher_about_payment(context, collection_id, parent_name, amount, comment, action):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç —É—á–∏—Ç–µ–ª—è –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π"""
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    c.execute("SELECT created_by FROM money_collections WHERE id = ?", (collection_id,))
    teacher_result = c.fetchone()
    conn.close()
    
    if not teacher_result:
        return
    
    teacher_id = teacher_result[0]
    
    if action == "paid":
        message = f"üí∞ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!\n\n"
        message += f"üë§ {parent_name}\n"
        message += f"üíµ {amount} —Ä—É–±.\n"
        message += f"üè∑ –ö–æ–¥: {comment}\n\n"
        message += f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏"
        markup = None
    else:
        message = f"‚ö†Ô∏è {parent_name} –Ω–µ –º–æ–∂–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å —Å–±–æ—Ä"
        markup = None
    
    try:
        await context.bot.send_message(teacher_id, message, reply_markup=markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∏—Ç–µ–ª—é: {e}")

async def show_collection_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if get_user_role(user_id) != 'teacher':
        return
    
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    
    c.execute("""SELECT mc.id, mc.title, mc.amount,
                        COUNT(CASE WHEN pp.status = 'confirmed' THEN 1 END) as confirmed,
                        COUNT(CASE WHEN pp.status = 'paid' THEN 1 END) as paid,
                        COUNT(CASE WHEN pp.status = 'cannot_pay' THEN 1 END) as cannot_pay,
                        COUNT(pp.id) as total,
                        SUM(CASE WHEN pp.status = 'confirmed' THEN pp.amount ELSE 0 END) as total_confirmed
                 FROM money_collections mc
                 LEFT JOIN parent_payments pp ON mc.id = pp.collection_id
                 WHERE mc.is_active = 1 AND mc.created_by = ?
                 GROUP BY mc.id, mc.title, mc.amount
                 ORDER BY mc.created_at DESC""", (user_id,))
    
    collections = c.fetchall()
    conn.close()
    
    if not collections:
        await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ—Ä–æ–≤ –Ω–µ—Ç")
        return
    
    message = "üìä –°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–æ–≤:\n\n"
    
    for collection in collections:
        coll_id, title, amount, confirmed, paid, cannot_pay, total, total_confirmed = collection
        pending = total - confirmed - paid - cannot_pay
        
        message += f"üìù {title}\n"
        message += f"üíµ {amount} —Ä—É–±. —Å —á–µ–ª–æ–≤–µ–∫–∞\n"
        message += f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {confirmed}/{total}\n"
        message += f"‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {paid}\n"
        message += f"‚ùå –ù–µ –º–æ–≥—É—Ç –æ–ø–ª–∞—Ç–∏—Ç—å: {cannot_pay}\n"
        message += f"‚è∏Ô∏è –ù–µ –æ—Ç–≤–µ—Ç–∏–ª–∏: {pending}\n"
        message += f"üí∞ –°–æ–±—Ä–∞–Ω–æ: {total_confirmed} —Ä—É–±.\n\n"
    
    await update.message.reply_text(message)

async def show_parent_payment_status(update: Update, context: ContextTypes.DEFAULT_TYPE, status_filter=None):
    user_id = update.effective_user.id
    if get_user_role(user_id) != 'parent':
        return
    
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    
    query = """SELECT mc.title, pp.amount, pp.status, pp.payment_comment, 
                      mc.deadline, pp.paid_at, pp.confirmed_at
               FROM money_collections mc
               JOIN parent_payments pp ON mc.id = pp.collection_id
               WHERE pp.parent_id = ? AND mc.is_active = 1"""
    
    params = [user_id]
    
    if status_filter:
        if status_filter == 'pending':
            query += " AND pp.status = 'pending'"
        elif status_filter == 'paid':
            query += " AND pp.status IN ('paid', 'confirmed')"
    
    query += " ORDER BY mc.created_at DESC"
    
    c.execute(query, params)
    payments = c.fetchall()
    conn.close()
    
    if not payments:
        status_text = {
            'pending': '–∫ –æ–ø–ª–∞—Ç–µ',
            'paid': '–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö'
        }.get(status_filter, '')
        
        await update.message.reply_text(f"–ù–µ—Ç —Å–±–æ—Ä–æ–≤ {status_text}")
        return
    
    if status_filter == 'pending':
        message = "üí≥ –°–±–æ—Ä—ã –∫ –æ–ø–ª–∞—Ç–µ:\n\n"
    elif status_filter == 'paid':
        message = "‚úÖ –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å–±–æ—Ä—ã:\n\n"
    else:
        message = "üìä –í—Å–µ —Å–±–æ—Ä—ã:\n\n"
    
    for payment in payments:
        title, amount, status, comment, deadline, paid_at, confirmed_at = payment
        
        status_emoji = {
            'pending': '‚è≥',
            'paid': 'üí∞',
            'confirmed': '‚úÖ',
            'cannot_pay': '‚ùå'
        }.get(status, '‚ùì')
        
        status_text = {
            'pending': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
            'paid': '–û–ø–ª–∞—á–µ–Ω–æ, –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —É—á–∏—Ç–µ–ª–µ–º',
            'cannot_pay': '–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å'
        }.get(status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')
        
        message += f"{status_emoji} {title}\n"
        message += f"üíµ {amount} —Ä—É–±.\n"
        message += f"üìä {status_text}\n"
        
        if deadline:
            deadline_date = datetime.fromisoformat(deadline).strftime('%d.%m.%Y')
            message += f"üìÖ –°—Ä–æ–∫: {deadline_date}\n"
        
        if comment:
            message += f"üè∑ –ö–æ–¥: {comment}\n"
        
        message += "\n"
    
    await update.message.reply_text(message)

async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now()
    tomorrow = today + timedelta(days=1)
    day_names = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    
    today_dow = today.weekday()
    c.execute("SELECT lesson_number, start_time, subject, requirements FROM schedule WHERE day_of_week = ? ORDER BY lesson_number", (today_dow,))
    today_lessons = c.fetchall()
    
    tomorrow_dow = tomorrow.weekday()
    c.execute("SELECT lesson_number, start_time, subject, requirements FROM schedule WHERE day_of_week = ? ORDER BY lesson_number", (tomorrow_dow,))
    tomorrow_lessons = c.fetchall()
    
    conn.close()
    
    def format_lessons(lessons):
        if not lessons:
            return "–£—Ä–æ–∫–æ–≤ –Ω–µ—Ç"
        formatted = ""
        for lesson in lessons:
            lesson_num, time_slot, subject, requirements = lesson
            req_text = f" ({requirements})" if requirements else ""
            formatted += f"{lesson_num}. {time_slot} - {subject}{req_text}\n"
        return formatted
    
    text = f"üìÖ –°–ï–ì–û–î–ù–Ø - {day_names[today_dow]} ({today.strftime('%d.%m')}):\n"
    text += format_lessons(today_lessons)
    
    text += f"\nüìÖ –ó–ê–í–¢–†–ê - {day_names[tomorrow_dow]} ({tomorrow.strftime('%d.%m')}):\n"
    text += format_lessons(tomorrow_lessons)
    
    await update.message.reply_text(text)

async def show_sent_announcements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    c.execute("SELECT id, teacher_name, announcement_text, sent_at, recipients_count FROM sent_announcements ORDER BY sent_at DESC LIMIT 10")
    announcements = c.fetchall()
    conn.close()
    
    if not announcements:
        await update.message.reply_text("üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    text = "üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
    
    for ann in announcements:
        ann_id, teacher_name, ann_text, sent_at, recipients = ann
        sent_time = datetime.fromisoformat(sent_at).strftime('%d.%m %H:%M')
        preview = (ann_text[:60] + '...') if len(ann_text) > 60 else ann_text
        text += f"üîπ ID{ann_id} | {teacher_name} ({sent_time})\n"
        text += f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {recipients}\n"
        text += f"{preview}\n\n"
    
    await update.message.reply_text(text)

async def show_sent_homework(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    c.execute("SELECT id, teacher_name, homework_text, sent_at, recipients_count FROM sent_homework ORDER BY sent_at DESC LIMIT 10")
    homework_list = c.fetchall()
    conn.close()
    
    if not homework_list:
        await update.message.reply_text("üìö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    text = "üìö –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
    
    for hw in homework_list:
        hw_id, teacher_name, hw_text, sent_at, recipients = hw
        sent_time = datetime.fromisoformat(sent_at).strftime('%d.%m %H:%M')
        preview = (hw_text[:60] + '...') if len(hw_text) > 60 else hw_text
        text += f"üîπ ID{hw_id} | {teacher_name} ({sent_time})\n"
        text += f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {recipients}\n"
        text += f"{preview}\n\n"
    
    await update.message.reply_text(text)

async def teacher_messages_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ['üí¨ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π', '‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—é'],
        ['üì§ –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'],
        ['üîô –ù–∞–∑–∞–¥']
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text('üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:', reply_markup=markup)

async def show_parent_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    c.execute("SELECT id, from_parent_id, parent_name, message_text, received_at FROM teacher_messages ORDER BY received_at DESC LIMIT 10")
    messages = c.fetchall()
    conn.close()
    
    if not messages:
        await update.message.reply_text("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π")
        return
    
    text = "üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π:\n\n"
    keyboard = []
    
    for msg in messages:
        msg_id, parent_id, parent_name, msg_text, received_at = msg
        received_time = datetime.fromisoformat(received_at).strftime('%d.%m %H:%M')
        preview = (msg_text[:50] + '...') if len(msg_text) > 50 else msg_text
        text += f"üîπ ID{msg_id} | {parent_name} ({received_time}):\n{preview}\n\n"
        keyboard.append([f"‚Ü©Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ ID{msg_id}"])
    
    keyboard.append(['üîô –ù–∞–∑–∞–¥'])
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(text, reply_markup=markup)

async def show_teacher_messages_for_parent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    c.execute("SELECT id, from_teacher_id, teacher_name, message_text, sent_at FROM parent_messages WHERE to_parent_id = ? ORDER BY sent_at DESC LIMIT 10", (user_id,))
    messages = c.fetchall()
    conn.close()
    
    if not messages:
        await update.message.reply_text("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —É—á–∏—Ç–µ–ª–µ–π")
        return
    
    text = "‚Ü©Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —É—á–∏—Ç–µ–ª–µ–π:\n\n"
    keyboard = []
    
    for msg in messages:
        msg_id, teacher_id, teacher_name, msg_text, sent_at = msg
        sent_time = datetime.fromisoformat(sent_at).strftime('%d.%m %H:%M')
        preview = (msg_text[:50] + '...') if len(msg_text) > 50 else msg_text
        text += f"üîπ ID{msg_id} | {teacher_name} ({sent_time}):\n{preview}\n\n"
        keyboard.append([f"‚Ü©Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ ID{msg_id}"])
    
    keyboard.append(['üîô –ù–∞–∑–∞–¥'])
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(text, reply_markup=markup)

async def select_parent_for_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    c.execute("SELECT telegram_id, full_name, username FROM users WHERE role = 'parent' ORDER BY full_name")
    parents = c.fetchall()
    conn.close()
    
    if not parents:
        await update.message.reply_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π")
        return
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
    keyboard = []
    
    for parent in parents:
        parent_id, full_name, username = parent
        name = full_name or username or f"ID{parent_id}"
        keyboard.append([f"üì® {name}"])
    
    keyboard.append(['üîô –ù–∞–∑–∞–¥'])
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    context.user_data['selecting_parent'] = True
    context.user_data['parent_list'] = {parent[0]: parent[1] or parent[2] or f"ID{parent[0]}" for parent in parents}
    
    await update.message.reply_text(text, reply_markup=markup)

async def show_messages_for_forwarding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    c.execute("SELECT id, from_parent_id, parent_name, message_text, received_at FROM teacher_messages ORDER BY received_at DESC LIMIT 15")
    messages = c.fetchall()
    conn.close()
    
    if not messages:
        await update.message.reply_text("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏")
        return
    
    text = "üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤—Å–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è–º:\n\n"
    keyboard = []
    
    for msg in messages:
        msg_id, parent_id, parent_name, msg_text, received_at = msg
        received_time = datetime.fromisoformat(received_at).strftime('%d.%m %H:%M')
        preview = (msg_text[:40] + '...') if len(msg_text) > 40 else msg_text
        text += f"üîπ {parent_name} ({received_time}):\n{preview}\n\n"
        keyboard.append([f"üì§ –ü–µ—Ä–µ—Å–ª–∞—Ç—å –æ—Ç {parent_name}"])
    
    keyboard.append(['üîô –ù–∞–∑–∞–¥'])
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    context.user_data['messages_for_forwarding'] = {msg[2]: {'id': msg[0], 'parent_name': msg[2], 'text': msg[3]} for msg in messages}
    
    await update.message.reply_text(text, reply_markup=markup)

async def handle_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    user_role = get_user_role(user_id)
    
    if not user_role or user_role == 'pending':
        await update.message.reply_text("–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    waiting_for = context.user_data.get('waiting_for')
    creating_collection = context.user_data.get('creating_collection')
    setting_up_payment = context.user_data.get('setting_up_payment')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    menu_buttons = ['üì¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', 'üìö –°–æ–∑–¥–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ', 'üì¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π', 
                   'üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π', 'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏', 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 
                   'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Å–∞', 'üí∞ –°–±–æ—Ä—ã –¥–µ–Ω–µ–≥', 'üí¨ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π', '‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—é',
                   'üì§ –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', 'üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è', 'üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è', 
                   '‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —É—á–∏—Ç–µ–ª—é', '‚Ü©Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å —É—á–∏—Ç–µ–ª—é', 'üí∞ –ú–æ–∏ —Å–±–æ—Ä—ã', 'üí∞ –°–æ–∑–¥–∞—Ç—å —Å–±–æ—Ä',
                   'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±–æ—Ä–æ–≤', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'üí≥ –ö –æ–ø–ª–∞—Ç–µ', '‚úÖ –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ', 
                   'üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π', 'üìã –í—Å–µ —Å–±–æ—Ä—ã', '‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ', 'üîô –ù–∞–∑–∞–¥']
    
    if (waiting_for or creating_collection or setting_up_payment) and text in menu_buttons:
        clear_user_context(context)
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É...")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if setting_up_payment == 'phone':
        # –û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        clean_phone = ''.join(filter(str.isdigit, text))
        if len(clean_phone) == 11 and clean_phone.startswith('8'):
            clean_phone = '+7' + clean_phone[1:]
        elif len(clean_phone) == 11 and clean_phone.startswith('7'):
            clean_phone = '+' + clean_phone
        elif len(clean_phone) == 10:
            clean_phone = '+7' + clean_phone
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        conn = sqlite3.connect('classroom.db')
        c = conn.cursor()
        c.execute("""INSERT OR REPLACE INTO teacher_payment_settings 
                    (teacher_id, phone_number, updated_at)
                    VALUES (?, ?, ?)""",
                 (user_id, clean_phone, datetime.now().isoformat()))
        conn.commit()
        conn.close()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        message = f"‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {clean_phone}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–±–æ—Ä—ã –¥–µ–Ω–µ–≥"
        
        clear_user_context(context)
        markup = get_payment_menu('teacher')
        await update.message.reply_text(message, reply_markup=markup)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–±–æ—Ä–∞
    if creating_collection:
        if creating_collection == 'title':
            context.user_data['collection_title'] = text
            context.user_data['creating_collection'] = 'description'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–±–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ê–≤—Ç–æ–±—É—Å, –≤—Ö–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã, –æ–±–µ–¥'):")
            
        elif creating_collection == 'description':
            context.user_data['collection_description'] = text
            context.user_data['creating_collection'] = 'amount'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å –æ–¥–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –≤ —Ä—É–±–ª—è—Ö:")
            
        elif creating_collection == 'amount':
            try:
                amount = int(text)
                if amount <= 0:
                    await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
                    return
                    
                title = context.user_data.get('collection_title')
                description = context.user_data.get('collection_description')
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω —É—á–∏—Ç–µ–ª—è
                conn = sqlite3.connect('classroom.db')
                c = conn.cursor()
                c.execute("SELECT phone_number FROM teacher_payment_settings WHERE teacher_id = ?", (user_id,))
                teacher_info = c.fetchone()
                
                if teacher_info:
                    phone = teacher_info[0]
                    purpose_code = f"SB{datetime.now().strftime('%m%d%H%M')}"
                    
                    c.execute("""INSERT INTO money_collections 
                                (title, description, amount, teacher_phone, purpose_code, is_active, created_by, created_at)
                                VALUES (?, ?, ?, ?, ?, 1, ?, ?)""",
                             (title, description, amount, phone, purpose_code, user_id, datetime.now().isoformat()))
                    
                    collection_id = c.lastrowid
                    conn.commit()
                    conn.close()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Ä–æ–¥–∏—Ç–µ–ª—è–º
                    sent_count = await send_payment_request_to_parents(context, collection_id)
                    
                    clear_user_context(context)
                    markup = get_payment_menu('teacher')
                    await update.message.reply_text(f"‚úÖ –°–±–æ—Ä '{title}' —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {sent_count} —Ä–æ–¥–∏—Ç–µ–ª—è–º\n–°—É–º–º–∞: {amount} —Ä—É–±. —Å —á–µ–ª–æ–≤–µ–∫–∞", reply_markup=markup)
                else:
                    conn.close()
                    await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –≤ –º–µ–Ω—é.")
            except ValueError:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        return
    
    # –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê –†–û–î–ò–¢–ï–õ–Ø –£–ß–ò–¢–ï–õ–Æ
    if waiting_for == 'replying_to_teacher' and user_role == 'parent':
        target_teacher_id = context.user_data.get('replying_to_teacher_id')
        parent_name = get_user_name(user_id)
        
        if target_teacher_id:
            try:
                await context.bot.send_message(target_teacher_id, f"‚Ü©Ô∏è –û—Ç–≤–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è {parent_name}:\n\n{text}")
                await update.message.reply_text("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—á–∏—Ç–µ–ª—é")
            except:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")
            
            clear_user_context(context)
        return
    
    # –û—Ç–≤–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è
    if text.startswith('‚Ü©Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ ID') and user_role == 'parent':
        try:
            msg_id = int(text.replace('‚Ü©Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ ID', ''))
            
            conn = sqlite3.connect('classroom.db')
            c = conn.cursor()
            c.execute("SELECT from_teacher_id, teacher_name, message_text FROM parent_messages WHERE id = ? AND to_parent_id = ?", (msg_id, user_id))
            message_data = c.fetchone()
            conn.close()
            
            if message_data:
                teacher_id, teacher_name, original_text = message_data
                preview = (original_text[:100] + '...') if len(original_text) > 100 else original_text
                
                context.user_data['waiting_for'] = 'replying_to_teacher'
                context.user_data['replying_to_teacher_id'] = teacher_id
                
                await update.message.reply_text(f"‚Ü©Ô∏è –û—Ç–≤–µ—á–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {teacher_name}:\n\n> {preview}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
            else:
                await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        except:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if context.user_data.get('selecting_parent') and text.startswith('üì®'):
        parent_name = text.replace('üì® ', '')
        parent_list = context.user_data.get('parent_list', {})
        
        selected_parent_id = None
        for parent_id, name in parent_list.items():
            if name == parent_name:
                selected_parent_id = parent_id
                break
        
        if selected_parent_id:
            context.user_data['waiting_for'] = 'personal_message'
            context.user_data['target_parent_id'] = selected_parent_id
            context.user_data.pop('selecting_parent', None)
            context.user_data.pop('parent_list', None)
            await update.message.reply_text(f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è {parent_name}:")
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if text.startswith('üì§ –ü–µ—Ä–µ—Å–ª–∞—Ç—å –æ—Ç '):
        parent_name = text.replace('üì§ –ü–µ—Ä–µ—Å–ª–∞—Ç—å –æ—Ç ', '')
        messages_for_forwarding = context.user_data.get('messages_for_forwarding', {})
        
        if parent_name in messages_for_forwarding:
            msg_info = messages_for_forwarding[parent_name]
            original_text = msg_info['text']
            
            conn = sqlite3.connect('classroom.db')
            c = conn.cursor()
            c.execute("SELECT telegram_id FROM users WHERE role = 'parent'")
            parents = c.fetchall()
            conn.close()
            
            sent_count = 0
            for parent in parents:
                try:
                    await context.bot.send_message(parent[0], f"üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è {parent_name}:\n\n{original_text}")
                    sent_count += 1
                except:
                    pass
            
            await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {parent_name} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ {sent_count} —Ä–æ–¥–∏—Ç–µ–ª—è–º")
            clear_user_context(context)
            return
    
    # –û—Ç–≤–µ—Ç —É—á–∏—Ç–µ–ª—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è
    if text.startswith('‚Ü©Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ ID') and user_role == 'teacher':
        try:
            msg_id = int(text.replace('‚Ü©Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ ID', ''))
            
            conn = sqlite3.connect('classroom.db')
            c = conn.cursor()
            c.execute("SELECT from_parent_id, parent_name, message_text FROM teacher_messages WHERE id = ?", (msg_id,))
            message_data = c.fetchone()
            conn.close()
            
            if message_data:
                parent_id, parent_name, original_text = message_data
                preview = (original_text[:100] + '...') if len(original_text) > 100 else original_text
                
                context.user_data['waiting_for'] = 'replying_to_message'
                context.user_data['target_parent_id'] = parent_id
                
                await update.message.reply_text(f"‚Ü©Ô∏è –û—Ç–≤–µ—á–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {parent_name}:\n\n> {preview}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
            else:
                await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        except:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    if waiting_for == 'announcement' and user_role == 'teacher':
        teacher_name = get_user_name(user_id)
        conn = sqlite3.connect('classroom.db')
        c = conn.cursor()
        c.execute("SELECT telegram_id FROM users WHERE role = 'parent'")
        parents = c.fetchall()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É
        c.execute("INSERT INTO sent_announcements (from_teacher_id, teacher_name, announcement_text, sent_at, recipients_count) VALUES (?, ?, ?, ?, ?)",
                  (user_id, teacher_name, text, datetime.now().isoformat(), len(parents)))
        announcement_id = c.lastrowid
        conn.commit()
        
        sent_count = 0
        for parent in parents:
            try:
                await context.bot.send_message(parent[0], f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç —É—á–∏—Ç–µ–ª—è {teacher_name}:\n\n{text}")
                c.execute("INSERT INTO message_recipients (message_type, message_id, recipient_id, sent_successfully, sent_at) VALUES (?, ?, ?, ?, ?)",
                         ('announcement', announcement_id, parent[0], True, datetime.now().isoformat()))
                sent_count += 1
            except:
                c.execute("INSERT INTO message_recipients (message_type, message_id, recipient_id, sent_successfully, sent_at) VALUES (?, ?, ?, ?, ?)",
                         ('announcement', announcement_id, parent[0], False, datetime.now().isoformat()))
        
        conn.commit()
        conn.close()
        
        await update.message.reply_text(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {len(parents)} —Ä–æ–¥–∏—Ç–µ–ª—è–º")
        clear_user_context(context)
        return
        
    elif waiting_for == 'homework' and user_role == 'teacher':
        teacher_name = get_user_name(user_id)
        conn = sqlite3.connect('classroom.db')
        c = conn.cursor()
        c.execute("SELECT telegram_id FROM users WHERE role = 'parent'")
        parents = c.fetchall()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –±–∞–∑—É
        c.execute("INSERT INTO sent_homework (from_teacher_id, teacher_name, homework_text, sent_at, recipients_count) VALUES (?, ?, ?, ?, ?)",
                  (user_id, teacher_name, text, datetime.now().isoformat(), len(parents)))
        homework_id = c.lastrowid
        conn.commit()
        
        sent_count = 0
        for parent in parents:
            try:
                await context.bot.send_message(parent[0], f"üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç —É—á–∏—Ç–µ–ª—è {teacher_name}:\n\n{text}")
                c.execute("INSERT INTO message_recipients (message_type, message_id, recipient_id, sent_successfully, sent_at) VALUES (?, ?, ?, ?, ?)",
                         ('homework', homework_id, parent[0], True, datetime.now().isoformat()))
                sent_count += 1
            except:
                c.execute("INSERT INTO message_recipients (message_type, message_id, recipient_id, sent_successfully, sent_at) VALUES (?, ?, ?, ?, ?)",
                         ('homework', homework_id, parent[0], False, datetime.now().isoformat()))
        
        conn.commit()
        conn.close()
        
        await update.message.reply_text(f"‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {len(parents)} —Ä–æ–¥–∏—Ç–µ–ª—è–º")
        clear_user_context(context)
        return
    
    elif waiting_for == 'personal_message' and user_role == 'teacher':
        teacher_name = get_user_name(user_id)
        target_parent_id = context.user_data.get('target_parent_id')
        
        if target_parent_id:
            try:
                await context.bot.send_message(target_parent_id, f"üì® –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∏—Ç–µ–ª—è {teacher_name}:\n\n{text}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
                conn = sqlite3.connect('classroom.db')
                c = conn.cursor()
                c.execute("INSERT INTO parent_messages (to_parent_id, from_teacher_id, teacher_name, message_text, sent_at) VALUES (?, ?, ?, ?, ?)",
                         (target_parent_id, user_id, teacher_name, f"üì® –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}", datetime.now().isoformat()))
                conn.commit()
                conn.close()
                
                await update.message.reply_text("‚úÖ –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—é")
            except:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
            clear_user_context(context)
        return
    
    elif waiting_for == 'replying_to_message' and user_role == 'teacher':
        target_parent_id = context.user_data.get('target_parent_id')
        teacher_name = get_user_name(user_id)
        
        if target_parent_id:
            try:
                await context.bot.send_message(target_parent_id, f"‚Ü©Ô∏è –û—Ç–≤–µ—Ç —É—á–∏—Ç–µ–ª—è {teacher_name}:\n\n{text}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
                conn = sqlite3.connect('classroom.db')
                c = conn.cursor()
                c.execute("INSERT INTO parent_messages (to_parent_id, from_teacher_id, teacher_name, message_text, sent_at) VALUES (?, ?, ?, ?, ?)",
                         (target_parent_id, user_id, teacher_name, f"‚Ü©Ô∏è –û—Ç–≤–µ—Ç: {text}", datetime.now().isoformat()))
                conn.commit()
                conn.close()
                
                await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—é")
            except:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")
            
            clear_user_context(context)
        return
        
    elif waiting_for == 'message_to_teacher' and user_role == 'parent':
        user_name = update.effective_user.full_name or update.effective_user.username or str(user_id)
        
        conn = sqlite3.connect('classroom.db')
        c = conn.cursor()
        c.execute("INSERT INTO teacher_messages (from_parent_id, parent_name, message_text, received_at) VALUES (?, ?, ?, ?)",
                  (user_id, user_name, text, datetime.now().isoformat()))
        c.execute("SELECT telegram_id FROM users WHERE role = 'teacher'")
        teachers = c.fetchall()
        conn.commit()
        conn.close()
        
        for teacher in teachers:
            try:
                await context.bot.send_message(teacher[0], f"‚úçÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è {user_name}:\n\n{text}\n\n(ID: {user_id})")
            except:
                pass
        
        await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∏—Ç–µ–ª—é")
        clear_user_context(context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if user_role == 'teacher':
        if text == 'üì¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ':
            clear_user_context(context)
            context.user_data['waiting_for'] = 'announcement'
            await update.message.reply_text("üì¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        elif text == 'üìö –°–æ–∑–¥–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ':
            clear_user_context(context)
            context.user_data['waiting_for'] = 'homework'
            await update.message.reply_text("üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")
        elif text == 'üí∞ –°–±–æ—Ä—ã –¥–µ–Ω–µ–≥':
            clear_user_context(context)
            markup = get_payment_menu('teacher')
            await update.message.reply_text("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–±–æ—Ä–∞–º–∏:", reply_markup=markup)
        elif text == 'üí∞ –°–æ–∑–¥–∞—Ç—å —Å–±–æ—Ä':
            clear_user_context(context)
            await create_money_collection(update, context)
        elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±–æ—Ä–æ–≤':
            clear_user_context(context)
            await show_collection_status(update, context)
        elif text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞':
            clear_user_context(context)
            await setup_teacher_payment_info(update, context)
        elif text == '‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è':
            clear_user_context(context)
            await show_pending_payments(update, context)
        elif text == '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ':
            clear_user_context(context)
            await show_rejected_payments(update, context)
        elif text == 'üìã –í—Å–µ —Å–±–æ—Ä—ã':
            clear_user_context(context)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–±–æ—Ä—ã —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
            conn = sqlite3.connect('classroom.db')
            c = conn.cursor()
            c.execute("""SELECT mc.title, mc.description, mc.amount, mc.created_at
                         FROM money_collections mc
                         WHERE mc.created_by = ? AND mc.is_active = 1
                         ORDER BY mc.created_at DESC""", (user_id,))
            collections = c.fetchall()
            conn.close()
            
            if not collections:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ—Ä–æ–≤")
            else:
                message = "üìã –í—Å–µ –≤–∞—à–∏ —Å–±–æ—Ä—ã:\n\n"
                for title, desc, amount, created_at in collections:
                    created_date = datetime.fromisoformat(created_at).strftime('%d.%m.%Y')
                    message += f"üí∞ {title}\n"
                    if desc:
                        message += f"üìù {desc}\n"
                    message += f"üíµ {amount} —Ä—É–±.\n"
                    message += f"üìÖ –°–æ–∑–¥–∞–Ω: {created_date}\n\n"
                await update.message.reply_text(message)
        elif text == 'üì¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π':
            clear_user_context(context)
            await show_sent_announcements(update, context)
        elif text == 'üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π':
            clear_user_context(context)
            await show_sent_homework(update, context)
        elif text == 'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏':
            clear_user_context(context)
            await teacher_messages_menu(update, context)
        elif text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            clear_user_context(context)
            await show_schedule(update, context)
        elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Å–∞':
            clear_user_context(context)
            conn = sqlite3.connect('classroom.db')
            c = conn.cursor()
            c.execute("SELECT COUNT(*) FROM users WHERE role = 'parent'")
            parents = c.fetchone()[0]
            c.execute("SELECT COUNT(*) FROM users WHERE role = 'teacher'")
            teachers = c.fetchone()[0]
            conn.close()
            await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–†–æ–¥–∏—Ç–µ–ª–µ–π: {parents}\n–£—á–∏—Ç–µ–ª–µ–π: {teachers}")
        elif text == 'üí¨ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π':
            clear_user_context(context)
            await show_parent_messages(update, context)
        elif text == '‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—é':
            clear_user_context(context)
            await select_parent_for_message(update, context)
        elif text == 'üì§ –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ':
            clear_user_context(context)
            await show_messages_for_forwarding(update, context)
        elif text == 'üîô –ù–∞–∑–∞–¥':
            clear_user_context(context)
            markup = get_main_menu('teacher')
            await update.message.reply_text("üë®‚Äçüè´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)
    
    elif user_role == 'parent':
        if text == 'üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è':
            clear_user_context(context)
            await update.message.reply_text("üì¢ –ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç —É—á–∏—Ç–µ–ª—è")
        elif text == 'üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è':
            clear_user_context(context)
            await update.message.reply_text("üìö –ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")
        elif text == '‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —É—á–∏—Ç–µ–ª—é':
            clear_user_context(context)
            context.user_data['waiting_for'] = 'message_to_teacher'
            await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—é:")
        elif text == '‚Ü©Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å —É—á–∏—Ç–µ–ª—é':
            clear_user_context(context)
            await show_teacher_messages_for_parent(update, context)
        elif text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            clear_user_context(context)
            await show_schedule(update, context)
        elif text == 'üí∞ –ú–æ–∏ —Å–±–æ—Ä—ã':
            clear_user_context(context)
            markup = get_payment_menu('parent')
            await update.message.reply_text("üí∞ –ú–æ–∏ –ø–ª–∞—Ç–µ–∂–∏:", reply_markup=markup)
        elif text == 'üí≥ –ö –æ–ø–ª–∞—Ç–µ':
            clear_user_context(context)
            await show_parent_payment_status(update, context, 'pending')
        elif text == '‚úÖ –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ':
            clear_user_context(context)
            await show_parent_payment_status(update, context, 'paid')
        elif text == 'üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π':
            clear_user_context(context)
            await show_parent_payment_status(update, context)
        elif text == 'üîô –ù–∞–∑–∞–¥':
            clear_user_context(context)
            markup = get_main_menu('parent')
            await update.message.reply_text('üë®‚Äçüë©‚Äçüëß –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markup)
    
    elif user_role == 'developer':
        if text in ['üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']:
            clear_user_context(context)
            await admin_panel(update, context)

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != DEVELOPER_ID:
        return
    
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    c.execute("SELECT role, COUNT(*) FROM users GROUP BY role")
    stats = c.fetchall()
    conn.close()
    
    text = "üéõ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    for role, count in stats:
        text += f"‚Ä¢ {role}: {count}\n"
    
    await update.message.reply_text(text)

async def make_teacher(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != DEVELOPER_ID or not context.args:
        return
    
    target_id = int(context.args[0])
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    c.execute("UPDATE users SET role = 'teacher' WHERE telegram_id = ?", (target_id,))
    conn.commit()
    conn.close()
    
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–∞–∑–Ω–∞—á–µ–Ω —É—á–∏—Ç–µ–ª–µ–º")
    try:
        await context.bot.send_message(target_id, "üéâ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —É—á–∏—Ç–µ–ª–µ–º!\n–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é.")
    except:
        pass

async def make_parent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != DEVELOPER_ID or not context.args:
        return
    
    target_id = int(context.args[0])
    conn = sqlite3.connect('classroom.db')
    c = conn.cursor()
    c.execute("UPDATE users SET role = 'parent' WHERE telegram_id = ?", (target_id,))
    conn.commit()
    conn.close()
    
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å")
    try:
        await context.bot.send_message(target_id, "üéâ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å!\n–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é.")
    except:
        pass

def main():
    init_db()
    app = Application.builder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin_panel))
    app.add_handler(CommandHandler("make_teacher", make_teacher))
    app.add_handler(CommandHandler("make_parent", make_parent))
    app.add_handler(CallbackQueryHandler(handle_payment_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_messages))
    
    logger.info(f"Bot starting... Developer ID: {DEVELOPER_ID}")
    app.run_polling()

if __name__ == '__main__':
    main()
